/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：
//  1. 头文件中的API功能介绍若与文档不符以文档为准
//  2. 若无特别说明ipcSUCCESS 表示成功 ，ipcFAULT表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef _IPC_SDK_V30_H_
#define _IPC_SDK_V30_H_

#ifdef IPCSDK_EXPORTS
#define  IPC_V30_API extern "C" __declspec(dllexport)
#else
#define IPC_V30_API extern "C"  __declspec(dllimport)
#endif


#include "IPCDefine.h"

#include "IPCSdkDefines.h"

#define IPCAPI __cdecl

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 视频解码前数据捕获回调函数，仅回调视频流
//参数： 1 预览句柄 
//       2 当前帧信息    
//       3 存放数据的缓冲区指针  
//       4 数据大小 
//       5 用户数据
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcLiveFrame_CallBack)( playHandle hPlayer, const IPC_FrameInfo* lpFrameInfo ,const CHAR* lpData,INT iDataLen, LPVOID lpContext ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 视频解码后数据捕获回调函数,解码后数据为YUY2
//参数： 1 预览句柄 
//       2 媒体数据元信息  
//       3 存放数据的缓冲区指针 
//       4 数据大小 
//       5 用户数据
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef void (WINAPI *ipcLiveYUV_CallBack)( playHandle hPlayer , const IPC_FrameInfo * lpFrameInfo,const CHAR* lpData,INT iDataLen, LPVOID lpContext ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：扫描回调函数
//参数：1 扫描句柄  
//      2 扫描的设备信息  
//      3 结构长度  
//      4 用户设置的回调参数 
//返回：无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef void (WINAPI *ipcScanOnlineDeviceCallBack)( HANDLE hScanHandle, LPIPCSCANINFO lpScanInfo,INT iScanInfoLen ,LPVOID lpContext ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 音视频解码前数据捕获回调函数
//参数： 
//1 句柄 (传回的音视频hStream不同，可根据当前帧类型判断当前返回的是音频hStream,还是视频handle)
//2 音视频数据结构
//3 用户数据
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcLiveFrame_CallBackEx)( LPVOID hStream, const IPC_FrameInfoEx* avFrameInfo , LPVOID lpContext ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：心跳回调函数
//参数：1 设备句柄  2 用户设置的回调参数
//返回：无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI*ipcHeartBeatCallback)(ipcHandle handle,BOOL isOnline, LPVOID context) ;


#include "IPCameraBackup.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：全局初始化
//参数：
//返回：是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcInitialize( void );


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：全局析构
//参数：
//返回：是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcUnInitialize( void );


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设备初始化,创建设备操作句柄
//参数：
//返回：操作句柄，操作失败返回错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API ipcHandle IPCAPI ipcCreateDevice( void ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：释放设备操作句柄。
//参数：1 操作句柄。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDestroyDevice( ipcHandle handle) ;


//网络连接

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置网络连接超时时限。
//参数：1 操作句柄 
//2 超时时限，单位为毫秒，取值范围[300,75000]，默认值:10 * 1000ms 
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetConnectTimeOut( ipcHandle handle, DWORD timeout) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：判断设备是否已经建立连接。
//参数：1 操作句柄。
//返回：0-连接  非0-断开。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcIsConnected( ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：与设备建立网络连接
//参数：1 操作句柄
//        2 用户名
//        3 密码
//        4 设备ip
//        5 端口号,IPC默认端口:30000
//      6 默认等待时间 0 毫秒
//返回：此返回值不代表设备连接成功。需调用ipcWaitConnected(),等待连接成功。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcConnect( ipcHandle handle,const CHAR * accout,const CHAR * password,const CHAR * ip, INT port = 30000 ,DWORD time = 0) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：断开与设备的网络连接。
//参数：1 操作句柄。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDisConnect( ipcHandle handle) ;

//////////////////////////////////////////////////////////////////////////
//说明：等待设备连接成功
//参数：1 操作句柄
//      2 连接超时时间,单位: 毫秒，建议5000ms.
//        若连接上，将立即返回。若在设置的时间内未连接上将返回失败
//返回：错误代码
//////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcWaitConnected( ipcHandle handle ,DWORD dwWaitTime) ;


//////////////////////////////////////////////////////////////////////////
/*
实时浏览
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：创建预览句柄。
//参数：1 操作句柄
//2 播放窗口句柄，如无需显示，可为NULL     
//3 通道号 ,始终为0
//4 码流ID 0-主码流 1-子码流
//返回：预览句柄，涉及预览的配置与控制，均通过此句柄进行。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API playHandle IPCAPI ipcCreateLivePlay( ipcHandle handle, displayHandle displayhandle, int channel, int streamID) ;


//说明：创建预览句柄。
//参数：1 操作句柄
//2 播放窗口句柄，如无需显示，可为NULL     
//3 通道号 ,始终为0
//4 码流ID 1-码流0,2-码流1,4码流2,8码流3,可以按位运算同时请求多路码流 
//返回：预览句柄，涉及预览的配置与控制，均通过此句柄进行。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API playHandle IPCAPI ipcCreateLivePlayEx( ipcHandle handle, displayHandle displayhandle,long lStreamId) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置视频的显示位置，如不设置默认填满窗口。若显示窗口尺寸发生变化需重新调用此函数进行设置
//参数：1 预览句柄
//      2 设置显示画面在窗口的坐标系 ,rect中保存的是左上点坐标，右下点坐标 即：
//        rect.left        = point.x;
//          rect.top        = point.y;
//          rect.right    = point2.x;
//          rect.bottom   = point2.y;
//            
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDisplayRect(playHandle handle,CONST RECT rect) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取视频的显示位置
//参数：1 预览句柄
//      2 获取显示画面在窗口的坐标系,rect中保存的是左上点坐标，右下点坐标 即：
//        rect.left        = point.x;
//          rect.top        = point.y;
//          rect.right    = point2.x;
//          rect.bottom   = point2.y;    
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDisplayRect(playHandle handle,OUT RECT* rect ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：开始播放预览。
//参数：1 预览句柄。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartLivePlay( playHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：停止预览，该函数将停止预览数据的接受与解码播放，但次句柄相关的回调，OSD配置仍有效。
//参数：1 预览句柄
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopLivePlay( playHandle handle) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//  参    数：	
//  说    明：开启图像锐化，；
//  返 回 值：正确返回0，错误返回非0；
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartLiveImageSharpen(playHandle hPlayer,float amount = 1.2f);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//  参    数：	
//  说    明：改变图像的锐化程度；
//  返 回 值：正确返回0，错误返回非0；
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcChangeLiveSharpenDegree(playHandle hPlayer,float amount );


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//  参    数：	
//  说    明：停止图像锐化；
//  返 回 值：正确返回0，错误返回非0；
////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopLiveImageSharpen(playHandle hPlayer);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：释放预览句柄，该函数将释放与此句柄相关的回调，OSD配置等信息。
//参数：1 预览句柄
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDestroyLivePlay(ipcHandle handle, playHandle hPlayer) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：实时数据回调函数，通过该回调函数获得解码前的实时视频数据。该函数需在ipcLivePlay之前调用 。
//参数：1 预览句柄
//2 回调函数指针 
//3 用户自定义数据。
//返回：
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRegisterLiveFrameCallBack( playHandle hPlayer, ipcLiveFrame_CallBack pCallBack, LPVOID context) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：实时解码数据回调函数，通过该回调函数获得解码后的实时视频数据。该函数需在ipcLivePlay之前调用 。
//参数：1 预览句柄
//2 回调函数指针 
//3 用户自定义数据。
//返回：
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRegisterLiveYUVCallBack( playHandle hPlayer, ipcLiveYUV_CallBack pCallBack, LPVOID context) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：强制生成I帧。
//参数：设备句柄
//   2. 通道id  
//
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcForceIDR ( ipcHandle handle,DWORD dwStreamId) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：开始录像，并保存至本地文件,文件类型为ASF文件。该函数可在预览句柄有效时调用。
//      本录像是客户端录像，在形成录像时，同时生成扩展名为*.ipcdx的同名索引文件。
//        用户可以通过获取到视频流后，自己保存私有格式的文件，通过自己的私有播放器播放。
//参数：1 预览句柄
//        2 保存的文件名,扩展名必须为*.asf.
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartRecord( playHandle hPlayer,const WCHAR * filePath) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：结束录像,该函数需在IPC_StopLivePlay之前调用，否则ipcStopLivePlay会强制调用本函数，确保录像文件的完整性。
//参数：1 预览句柄。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopRecord(  playHandle hPlayer) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：单帧数据捕获并保存成图形存放在指定的文件中。
//参数：1 预览句柄 
//2 保存的图像类型（bmp = 1 ,jpeg = 2）
//3 文件名
//返回：正确返回保存图像的大小，否则返回错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcCapturePicture(  playHandle hPlayer, int picType, const WCHAR* file_name) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：单帧数据捕获并保存成图像存放在指定的内存空间中。
//参数：1 预览句柄 
//2 保存的图像类型（bmp = 1 ,仅支持BMP）
//3 返回的数据
//4 返回的数据长度
//返回：正确返回保存图像的大小，否则返回错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcCapturePictToBuff(  playHandle hPlayer, int picType, BYTE* buff,LONG* len) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 叠加osd信息,
//参  数: 1 码流操作句柄
//2 LPOSD_TYPE
//返回: 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDisplayOSD( playHandle hPlayer,LPIPC_OSDPARAM osd_info) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取视频宽度
//参数：1 预览句柄
//      2 返回宽度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetImageWidth(playHandle handle,IN LONG* width) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取视频高度
//参数：1 预览句柄
//      2 返回高度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetImageHeight(playHandle handle,IN LONG* height) ;


///////////////////////////////////////////////////////////////////////////////////////////////////////////
////说明：获取视频帧率
////参数：1 预览句柄
////      2 帧率
////返回：错误代码。
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//IPC_V30_API INT IPCAPI ipcGetVideoFPS(playHandle handle,LONG* fps) ;


//视频设置
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:设置视频遮挡信息
//参数:
//1 设备操作句柄
//2 视频遮挡数组，最大4组
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPictMask(ipcHandle handle, IPC_IMGPM pm[4]);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:获取视频遮挡信息
//参数:
//1 设备操作句柄
//2 返回视频遮挡数组，大小为4
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetPictMask(ipcHandle handle, IPC_IMGPM* pm);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:设置MJPEG实时码流图像质量
//参数:
//1 设备操作句柄
//2 码流ID
//3 编码质量 1-100
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetImageQuant(ipcHandle handle, INT streamID, INT param) ;

///////////////////////////
//网络管理
//////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:获取云台配置信息
//参数:
//1 设备操作句柄
//2 云台协议类型
//3 地址
//4 云台属性配置

//返回: 错误代码 0 successed ,-1 failed
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetPTZTransProp ( ipcHandle handle,DWORD* protocol_type,DWORD* address,LPIPC_COMM_PROP prop) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 检索在线设备
//参数:
//1 扫描结果回调
//2 回调参数
//返回值  ： 服务描述句柄
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API HANDLE IPCAPI ipcScanOnlineDevices(ipcScanOnlineDeviceCallBack callback,LPVOID context) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 停止检索在线设备
//参数:
//1 服务描述句柄
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API VOID IPCAPI ipcStopScanOnlineDevices(HANDLE handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取指定类型的系统参数,详细用法见例子：IPCFuncDemo
//参  数:
//1 操作句柄
//2 指定类型
//3 附带整形参数
//4 返回参数数据
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetSystemSetting( ipcHandle handle, INT command, int param,CHAR * inBuffer) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置指定类型的系统设置参数,详细用法见例子：IPCFuncDemo
//参  数:
//1 操作句柄
//2 指定类型
//3 附带整形参数
//4 附带字符串
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetSystemSetting( ipcHandle handle, INT command, int param, const CHAR * inBuffer) ;


//////////////////////////////////////////////////////////////////////////
/*
*第三部分: 云台控制
*
*/
//////////////////////////////////////////////////////////////////////////
/*
*物理云台
*/


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置机械控制云台。详细用法见例子：IPCVideoDemo
//参数：1 设备句柄
//2 通道号,IPC始终为0
//3 命令 
//4 0-开始，1-停止， 
//5 水平速度 :0～100
//6 垂直速度 :0～100
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZControl( ipcHandle handle,  int channel, int PTZCommand, int PTZControl, int hSpeed, int vSpeed) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置机械云台预置位。
//参数：1 设备句柄 
//2 通道号
//3 预置位标号1～255 ,具体值有IPC配置的云台硬件决定
//4 预置点名称: 最多31个非中文字符。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZSetPreset( ipcHandle handle,  int channel, int index, const CHAR * name) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：转移机械云台到预置位。
//参数：
//1 设备句柄 
//2 通道号
//3 预置位标号1～255 
//4 水平速度:0～100
//5 垂直速度:0～100
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZGotoPreset( ipcHandle handle,  int channel, int index, int hSpeed , int vSpeed ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取机械云台预置位信息
//参数：
//1 设备句柄 
//2 输入获取的总数量
//3 数据被写入的内存块
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZGetAllPreset( ipcHandle handle, DWORD count, LPIPC_PRESET preset );



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：删除机械云台预置位。
//参数：
//1 设备句柄 
//2 预置位标号1～255 
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZClearPreset( ipcHandle handle,   int index ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取云台预置位能力
//参数：
//1 设备句柄 
//2 云台预置位能力：预置位总数
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZGetCapacity( ipcHandle handle, DWORD* capacity );


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取一条巡航路径
//参数：1 设备句柄 
//2 巡航路径iCruiseId,0 表示获取全部巡航路径
//3 存放巡航路径的结构体指针，该内存块应为支持的最多巡航路大小。 
//4 返回获取到的巡航路个数
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetPTZCruise ( ipcHandle handle,INT iCruiseId, struct IPC_PTZCruiseParam *config,INT* count) ;

#define IPC_SET_CRUISE_ALLDATA   1
#define IPC_SET_PRESET_CRUISE    2
#define IPC_DEL_PRESET_CRUISE    3
#define IPC_CLEAR_CRUISE         4
#define IPC_CLEAR_ALL_CRUISE     5

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置一条巡航路径
//参数：1 设备句柄 
//2 巡航配置命令
//3 巡航路径iCruiseId
//4 该结构体与命令对应
//      dwCruiseCmd						  iCruiseId              config
//   IPC_SET_CRUISE_ALLDATA              0                      PTZCruiseParam         包含设置的巡航路径的全部信息
//   IPC_SET_PRESET_CRUISE               巡航路径id             PRESET_CRUISE_POINT_t  要添加或者修改的巡航点信息
//     IPC_DEL_PRESET_CRUISE             巡航路径id             PRESET_CRUISE_POINT_t  巡航点  仅预置点id有效
//     IPC_CLEAR_CRUISE                  巡航路径id             NULL
//     IPC_CLEAR_ALL_CRUISE              巡航路径0              NULL


//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPTZCruise ( ipcHandle handle,  INT dwCruiseCmd,INT iCruiseId,VOID *config) ;

#define IPC_FILL_PRE_SEQ	    6
#define IPC_SET_SEQ_DWELL       7
#define IPC_SET_SEQ_SPEED       8
#define IPC_CLE_PRE_SEQ         9
#define IPC_RUN_SEQ		        10
#define IPC_STOP_SEQ		    11

   //说明：设置一条巡航路径  (仅3.0设备支持)
    //参数：1 设备句柄 
    //2 巡航配置命令
    //      dwCruiseCmd                 
    //   IPC_FILL_PRE_SEQ				  将预置点加入巡航序列
    //   IPC_SET_SEQ_DWELL                设置巡航点停顿时间
    //	 IPC_SET_SEQ_SPEED                设置巡航速度
    //	 IPC_CLE_PRE_SEQ                  将预置点从巡航序列中删除 
    //	 IPC_RUN_SEQ					  开始巡航
	//	 IPC_STOP_SEQ					  停止巡航
    //3 巡航路径，最多支持32条路径（序号从1开始） 
    //4 巡航点，最多支持32个点（序号从1开始） 
    //5 不同巡航命令时的值不同，预置点(最大1-255)、时间(最大1-30)、速度(最大0-255)
	//返回：错误代码。
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZCruise ( ipcHandle handle,  INT dwCruiseCmd,INT iCruiseRout,INT iCruisePoint,DWORD dwInput) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：操作一条巡航路径
//参数：1 设备句柄 
//2 通道号
//3 巡航路径id 
//4 命令，0-关闭，1-开始。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPTZCruiseControl ( ipcHandle handle,INT iCruiseId,  INT ctrl) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：云台透明数据,使用该接口能直接通过设备将云台控制码信息直接传输给云台设备，而无需配置解码器。 
//参数:    1 设备句柄 
//    2 数据缓冲区指针
//    3 数据大小
//    返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPTZTrans( ipcHandle handle, unsigned char * ptzcode, int size) ;




/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置云台串口属性[协议,地址,波特率...]
//参数：设备句柄
//   2. 协议类型[1,2] ：PROTOCOL_D  = 1,PROTOCOL_P  =  2 ,若配置透明通道的串口，协议选择为1
//   3. 起始地址 [0,255]
//   4. 云台配置信息
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPTZTransProp ( ipcHandle handle,DWORD protocol_type,DWORD address,CONST LPIPC_COMM_PROP prop) ;




/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:控制机械云台坐标
//参  数: [in]        handle                ipcCreateDevice的返回值
//          [in]        cmdType             控制命令类型如IPC_CMD_PTZ_GOTO_REL_POSITION、IPC_CMD_PTZ_GOTO_ABS_POSITION
//                                                        IPC_CMD_PTZ_GET_ABS_POSITION
//          [in/out]  pPosition            坐标参数，参考IPC_PTZ_POSITION_PARAM说明
//返回：0 表示成功，-1表示失败 。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZPositionControl( ipcHandle handle,  int cmdType, LPIPC_PTZ_POSITION_PARAM pPosition ) ;

//////////////////////////////////////////////////////////////////////////
/*
*数字云台
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：控制数字云台。
//参数：
//1 设备句柄
//2 命令 
//3 值 
//4 预置位设定时，需要传入字符串，使用此参数
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDPTZControl( playHandle hPlayer,int DPTZCommand,INT value,const CHAR* buff) ;//preset name


//////////////////////////////////////////////////////////////////////////
/*
*第四部分: 事件管理
*
*/

//视频异常

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取视频异常事件
//参  数: 1 设备操作句柄
//2 延时多少时间再进行报警，以秒为单位
//3 动作响应设置信息
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetCameraUnusualEvent(ipcHandle handle, OUT DWORD* delayTime, OUT IPC_ActionOptionInfo* action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置视频异常事件
//参  数: 1 设备操作句柄
//2 延时多少时间再进行报警，以秒为单位
//3 响应动作设置，见ActionOptionInfo数据结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetCameraUnusualEvent(ipcHandle handle, IN DWORD delayTime, IN IPC_ActionOptionInfo action_option) ;



//移动侦测
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取移动侦测报警联动配置信息
//参  数: 
//1 设备操作句柄
//2 响应动作设置，ActionOptionInfo数据结构的指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMontionEventAction(ipcHandle handle, OUT IPC_ActionOptionInfo* action_option);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置移动侦测报警联动配置信息
//参  数: 
//1 设备操作句柄
//2 响应动作设置，ActionOptionInfo数据结构的指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMontionEventAction(ipcHandle handle, IN IPC_ActionOptionInfo action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取移动侦测区域配置信息
//参  数: 
//1 设备操作句柄
//2 移动侦测事件信息,
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMontionWndInfo(ipcHandle handle, OUT IPC_MontionDetectionWindowInfoEx* mdi) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置移动侦测区域配置信息
//参  数: 
//1 设备操作句柄
//2 移动侦测事件信息
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMontionWndInfo(ipcHandle handle, IN IPC_MontionDetectionWindowInfoEx mdi_[4]) ;


//报警输入

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输入事件
//参  数: 
//1 设备操作句柄
//2 报警电平，0：低电平，1：高电平
//3 响应动作设置，ActionOptionInfo数据结构的指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetInputEvent(ipcHandle handle, OUT DWORD* level, OUT IPC_ActionOptionInfo* action_option) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置报警输入事件
//参  数: 
//1 设备操作句柄
//2 报警电平，0：低电平，1：高电平
//3 响应动作设置，见ActionOptionInfo数据结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetInputEvent(ipcHandle handle, IN DWORD level, IN IPC_ActionOptionInfo action_option) ;


//输入输出端口

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输入端口数,目前仅输出1个端口
//参  数: 
//1 设备操作句柄
//2 报警输入端口数,
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetInputPortNumber(ipcHandle handle, OUT INT* number) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输入端口状态
//参  数: 
//1 设备操作句柄
//2 端口状态,
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetInputPortStatus(ipcHandle handle, OUT INT* status) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输入端口触发条件，仅支持1个
//参  数: 
//1 设备操作句柄
//2 报警输入端口触发条件，0为低电平，1为高电平
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetInputPortTriggerStatus(ipcHandle handle, OUT INT* triggerStatus) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置报警输入端口触发条件，仅支持1个
//参  数: 
//1 设备操作句柄
//2 电平值
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetInputPortTriggerStatus(ipcHandle handle, IN INT param) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输出端口数,目前仅输出1个端口
//参  数: 
//1 设备操作句柄
//2 报警输出端口数
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetOutputPortNumber(ipcHandle handle, OUT INT* param) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输出端口状态，仅支持1个
//参  数: 
//1 设备操作句柄
//2 报警输出端口状态，0为低电平，1为高电平
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetOutputPortStatus(ipcHandle handle, OUT INT* status) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置报警输出端口状态
//参  数: 
//        1 设备操作句柄
//        2 高低电平值
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetOutputPortStatus(ipcHandle handle, IN INT param) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取输出端口报警联动行为
//参  数: 
//1 设备操作句柄
//2 高低电平值
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetOutputPortAction(ipcHandle handle, OUT INT* param) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置输出端口报警联动行为
//参  数: 
//1 设备操作句柄
//2 高低电平值
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetOutputPortAction(ipcHandle handle, IN INT param) ;

IPC_V30_API INT IPCAPI ipcGetAlarmOut( LONG lUserID,IPC_ALARMOUTSTATUS* lpAlarmOutState);
IPC_V30_API INT IPCAPI ipcSetAlarmOut( LONG lUserID,LONG lAlarmOutPort,LONG lAlarmOutStatic);
IPC_V30_API INT IPCAPI ipcTriggerAlarmOutput(ipcHandle handle, LONG port, LONG duration );

//布防设置


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取视频异常布防信息
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetCameraUnusualPlan(ipcHandle handle, OUT DWORD** start_time, OUT DWORD** end_time) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置定时录像布防信息
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetCameraUnusualPlan(ipcHandle handle, IN DWORD start_time[7][IPC_MAX_TIME_SEC],IN DWORD end_time[7][IPC_MAX_TIME_SEC]) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取移动侦测布防信息
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMontionDetectionPlan(ipcHandle handle, OUT DWORD** start_time, OUT DWORD** end_time) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置移动侦测布防信息
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMontionDetectionPlan(ipcHandle handle, IN DWORD start_time[7][IPC_MAX_TIME_SEC],IN DWORD end_time[7][IPC_MAX_TIME_SEC]) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取报警输入布防
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetInputPlan(ipcHandle handle, OUT DWORD** start_time, OUT DWORD** end_time) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置报警输入布防
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetInputPlan(ipcHandle handle, OUT DWORD start_time[7][IPC_MAX_TIME_SEC], OUT DWORD end_time[7][IPC_MAX_TIME_SEC]) ;




// ipcSetSystemSetting ipcGetSystemSetting SDK卡部分

/*
*系统管理
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:启动升级服务
//参  数:
//        1.服务的网络端口号,本地端口号，并非IPC的端口号
//返  回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcUpdateServiceStart( short port) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:停止升级服务
//参  数:
//返  回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcUpdateServiceStop() ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设备升级
//参  数:
//1.设备句柄
//2.指定的升级文件
//返  回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcUpgrade( ipcHandle handle,const CHAR * inPathFileName) ;



//系统设置

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:恢复到出厂设置。将所有参数恢复到出厂设置
//参数：
//1 设备操作句柄
//
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSystemRestore(ipcHandle handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 恢复出厂设置.将制定类型的参数恢复到出厂设置
//参数:
//1 设备句柄
//2 还原的类型,
//返回值  ： 大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcResetSetting( ipcHandle handle, DWORD type) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:实现设备重启功能
//参数:
//1 设备操作句柄
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceRestart(ipcHandle handle) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:实现设备待机功能
//参数:
//1 设备操作句柄
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceStandby(ipcHandle handle) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:实现设备唤醒功能
//参数:
//1 设备操作句柄
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceWakeup(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 设置心跳间隔,需已经建立网络连接。
//参数:
//1 设备操作句柄
//2 心跳间隔，单位：毫秒，不小于5000ms
//3 回调
//4 用户参数
//返回值  ： 是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetHeartbeat(ipcHandle handle, DWORD interval,ipcHeartBeatCallback callback,LPVOID context) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 设置心跳间隔扩展（支持设备连接前使用）
//参数:
//1 设备操作句柄
//2 心跳间隔，单位：毫秒，不小于5000ms
//3 设备ip地址
//4 回调
//5 用户参数
//返回值  ： 是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetHeartbeatEx(ipcHandle handle, DWORD interval,const CHAR* ip,ipcHeartBeatCallback callback,LPVOID context) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 获取指定类型的参数。
//参  数: 1 操作句柄，
//2 配置命令，见配置命令宏定义
//3 不同的命令，有时需要额外的参数，比如制定通道号，或者流类型
//4 特别指令需要返回的复杂数据
//返回值: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetConfig( ipcHandle handle, IN int command,  IN int param, OUT void * outBuffer) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置指定类型的参数。
//参  数: 1 操作句柄，
//          2 配置命令，见配置命令宏定义
//          3 不同的命令，有时需要额外的参数，比如制定通道号，或者流类型
//          4 存放参数数据的缓存指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetConfig( ipcHandle handle, IN int command, IN int param, IN const char * inBuffer) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:创建MP4文件并返回操作句柄
//参  数: 1 文件名
//
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API HANDLE IPCAPI ipcMP4Open(CONST WCHAR *pFileName);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:关闭MP4文件
//参  数: 1 文件句柄
//
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4Close(HANDLE hMP4);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:添加视频流
//参  数: 1 文件句柄
//        2 流id, 同一个文件中所有流ID不能重复
//        3 视频结构
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4AddVideoStream(HANDLE hMP4,long lStreamID,IPC_MP4_VIDEOPARAM Param);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:添加音频流
//参  数: 1 文件句柄
//        2 流id, 同一个文件中所有流ID不能重复
//        3 音频结构
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4AddAudioStream(HANDLE hMP4,long lStreamID,IPC_MP4_AUDIOPARAM Param);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:开始
//参  数: 1 文件句柄
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4Run(HANDLE hMP4);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:停止
//参  数: 1 文件句柄
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4Stop(HANDLE hMP4);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:写数据.写视频流时，第一帧需是I帧数据
//参  数: 1 文件句柄
//        2 流id
//        3 数据
//        4 数据长度
//        5 帧类型
//        6 时间戳,单位100纳秒
//返回：错误代码。0 成功 ,-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcMP4Write(HANDLE hMP4,long lStreamID,const unsigned char *pData,long lSize,int nFrameType,__int64 llTimeStamp);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:报警回调
//参  数: 1 类型
//        2 报警设备信息   
//        3 报警信息
//        4 报警信息缓存大小
//        5 用户自定义数据
//返回：无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef void(CALLBACK * ipcAlarmCallBack)(LONG lType,IPC_ALARMER *pAlarmer,CHAR *pAlarmInfo,DWORD dwBufLen,VOID *pUser);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 注册报警回调函数。
//参  数: 1 告警信息会回调函数
//        2 用户自定义数据
 //返回： 非零失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAlarmCenterCallBack(ipcAlarmCallBack fAlarmCallBack,VOID *pUser) ;


//说明：监听本地，等待IPC主动链接 。IPC可以主动的方式连接一个或多个SDK主机, 连接的主机地址在IPC告警中心参数中设置。
//参数：1 需监听的网卡地址，设置为Null时为监听所有网卡。
//2 监听的端口号。
//返回：失败返回非0。
IPC_V30_API INT IPCAPI ipcStartListen( const CHAR *ip,  INT port) ;

//说明：停止监听本地。
//返回：失败返回非0。
IPC_V30_API INT IPCAPI ipcStopListen() ;



//说  明:设置事件使能
//参  数: 1 设备操作句柄
//          2 报警事件类型
//          3 告警使能标志
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetEventEnable(ipcHandle handle,IN DWORD dwEvent, IN DWORD dwEnable) ;

//说  明:设置配置改变事件
//参  数: 1 设备操作句柄
//          2 报警事件类型
//          3 告警使能标志
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetEventEnable(ipcHandle handle,IN DWORD dwEvent, OUT DWORD* dwEnable) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//AUDIO
/////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：创建音频监控句柄。
//参数：
//1 操作句柄
//2 音频通信端口（PC->IPC） [保留默认填0]
//3 音频通信端口（IPC->PC） [保留默认填0]
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcCreateAudioLivePlay( ipcHandle handle,int device_in_port,int device_out_port) ;



//说明：设置语音监控的控制参数
//1 设备操作句柄
//2 控制标志，接收IPC声音
//3 控制标志，播放IPC声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcSetAudioLivePlayControl( ipcHandle handle,BOOL bEnableIPCData,BOOL bEnablePlayer) ;

//说明：获取语音监控的控制参数
//1 设备操作句柄
//2 控制标志，接收IPC声音
//3 控制标志，播放IPC声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcGetAudioLivePlayControl( ipcHandle handle,BOOL* bEnableIPCData,BOOL* bEnablePlayer) ;

//说明：静音语音监控
//1 设备操作句柄
//2 控制标志: TRUE 静音 ，FALSE 非静音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcSetAudioLivePlayMute( ipcHandle handle,BOOL bMute ) ;

//说明：获取语音监控的静音标志
//1 设备操作句柄
//2 控制标志: TRUE 静音 ，FALSE 非静音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcGetAudioLivePlayMute( ipcHandle handle,BOOL* bMute ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：开始语音对讲
//参数：
//1 设备操作句柄
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartTalk( ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：停止语音对讲
//参数：
//1 设备操作句柄
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopTalk( ipcHandle handle) ;


//说明：设置语音对讲的控制参数
//1 设备操作句柄
//2 控制标志，采集本地声音
//3 控制标志，传输本地声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcSetTalkControl( ipcHandle handle,BOOL bEnableCapture,BOOL bEnableTransfer) ;

//说明：设置语音对讲的控制参数，此函数为适应在本机采集又不自动发送而使用手动编码发送的方式
//1 设备操作句柄
//2 控制标志，采集本地声音
//3 控制标志，传输本地声音
//4 控制标志，在允许采集和传输的情况下，是否自动发送声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcSetTalkControlEx( ipcHandle handle,BOOL bEnableCapture,BOOL bEnableTransfer,BOOL bEnableAutoTransfer) ;

//说明：获取语音对讲的控制参数
//1 设备操作句柄
//2 控制标志，采集本地声音
//3 控制标志，传输本地声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcGetTalkControl( ipcHandle handle,BOOL* bEnableCapture,BOOL* bEnableTransfer) ;


//说明：获取语音对讲的控制参数
//1 设备操作句柄
//2 控制标志，采集本地声音
//3 控制标志，传输本地声音
//4 控制标志，在允许采集和传输的情况下，是否自动发送声音
//返回：错误代码。
IPC_V30_API INT IPCAPI ipcGetTalkControlEx( ipcHandle handle,BOOL* bEnableCapture,BOOL* bEnableTransfer,BOOL* bEnableAutoTransfer) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：开始音频监控。
//参数：
//1 音频监控句柄。
//返回：错误代码。
//备注：扩展函数带EX结尾，需要流id可支持ipc3.0像机，2.0像机默认添0。如果不打算升级api可使用SetConfig来设置IPC_SDKINNER_AUDIO_ENABLE音频使能标志，1表启动
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartAudioLivePlay( ipcHandle handle) ;
IPC_V30_API INT IPCAPI ipcStartAudioLivePlayEx( ipcHandle handle_ ,DWORD streamId_ ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：停止音频监控
//参数：
//1 音频监控句柄
//返回：错误代码。
//备注：扩展函数带EX结尾，需要流id可支持ipc3.0像机，2.0像机默认添0。如果不打算升级api可使用SetConfig来设置IPC_SDKINNER_AUDIO_ENABLE音频使能标志，0表停止
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopAudioLivePlay( ipcHandle handle) ;
IPC_V30_API INT IPCAPI ipcStopAudioLivePlayEx( ipcHandle handle_,DWORD streamId ) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：释放音频监控句柄，该函数将释放与此句柄相关的回调、资源。
//参数：
//1 设备句柄
//2 音频监控句柄
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDestroyAudioLivePlay(ipcHandle handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：配置IPC音频参数。
//参数：
//1 设备句柄
//2 音频数据结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioDeviceConfig(ipcHandle handle ,LPIPC_AUDIOCONF lpAudioConf) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取IPC音频参数。
//参数：
//1 设备句柄
//2 音频数据结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetAudioDeviceConfig(ipcHandle handle ,LPIPC_AUDIOCONF lpAudioConf) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置音视频数据流回调
//参  数: 1 操作句柄
//        2 回调函数
//        3 用户数据
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAVCallbackEx(playHandle handle ,ipcLiveFrame_CallBackEx func,LPVOID lpContext) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 音视频解码前数据扩展2回调函数
//参数： 
//[out] 句柄 传回视频播放句柄
//[out] 视频流id 0 - 3
//[out] 帧类型
//[out] 数据
//[out] 数据长度
//[out] 用户参数
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcAVStreamCallBackEx3)( LPVOID hStream, long lStreamId,long lType,const unsigned char *pBuf,long lSize,LPVOID pContext ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 音视频解码前数据扩展2回调函数
//参数： 
//[out] 句柄 传回视频播放句柄
//[out] 帧类型
//[out] 数据
//[out] 数据长度
//[out] 用户参数
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcAVStreamCallBackEx2)( LPVOID hStream, long lType,const unsigned char *pBuf,long lSize,LPVOID pContext ) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置音视频数据流扩展2回调
//参  数: 1 操作句柄
//        2 回调函数
//        3 用户数据
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAVCallbackEx2(playHandle handle ,ipcAVStreamCallBackEx2 func,LPVOID lpContext) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：直接发送音频数据到IPC。
//参数：
//1 设备句柄
//2 音频类型 1 :711,0 amr(暂不支持)
//3 音频数据
//4 音频数据长度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSendAudioStream(ipcHandle handle ,int type, unsigned char* data, unsigned int data_len) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：编码音频数据。
//参数：
//1 设备句柄
//2 音频类型 1 :711,0 amr(暂不支持)
//3 音频数据
//4 音频数据长度
//5 音频编码数据
//6 音频编码数据长度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcEncodeAudioStream(ipcHandle handle ,int type, unsigned char* src_data, unsigned int src_data_len,unsigned char* enc_data, unsigned int* enc_data_len) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 音频对讲数据回调函数 
//参数： 1 操作句柄 
//       2 数据指针 
//       3 数据长度 
//       4 用户参数
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef INT (WINAPI *ipcTalkCallback)(ipcHandle hAudio,const unsigned char* Data ,INT iDataLen,LPVOID lpContext);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置语音对讲回调
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetTalkCallback(ipcHandle handle ,ipcTalkCallback func,LPVOID lpContext) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 枚举音频设备
//参  数: 1 操作句柄
//        2 本端声卡设备
//        3 数量
//返回：错误代码。0 成功 ，-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcEnumAudioDevice (ipcHandle handle, IPC_AudioDevice * pstDevice, LONG* pSize ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 设置当前音频设备
//参  数: 1 操作句柄
//        2 声卡设备
//返回：错误代码。0 成功 ，-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioDevice ( ipcHandle handle,IPC_AudioDevice stDevice );


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 获取当前音频设备
//参  数: 1 操作句柄
//        2 本端声卡设备
//返回：错误代码。0 成功 ，-1失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetAudioDevice ( ipcHandle handle,IPC_AudioDevice* pstDevice );

//说明：设置设备名称
//参数：1 设备操作句柄
//      2 设备名称 最长32字节
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDeviceName(ipcHandle handle, IN CHAR* deviceName) ;


//说明：获取设备名称
//参数：1 设备操作句柄
//      2 设备名称 最长32字节
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceName(ipcHandle handle, OUT CHAR* deviceName) ;


//说明：设置设备OSD
//参数：1 设备操作句柄
//      2 DEVICEOSD数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDeviceOSD(ipcHandle handle, IN LPIPC_DEVICEOSD lpOSD) ;


//说明：获取设备OSD信息
//参数：1 设备操作句柄
//      2 DEVICEOSD数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceOSD(ipcHandle handle, OUT LPIPC_DEVICEOSD lpOSD) ;


//说明：设置设备时间信息显示格式
//参数：1 设备操作句柄
//      2 DATETIMEOSD数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDeviceDateTimeOSD(ipcHandle handle, IN LPIPC_DATETIMEOSD lpTimeOSD) ;


//说明：获取设备时间信息显示格式
//参数：1 设备操作句柄
//      2 DATETIMEOSD数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceDateTimeOSD(ipcHandle handle, OUT LPIPC_DATETIMEOSD lpTimeOSD) ;


//说明：控制机械云台左上移动
//参数： 1 设备操作句柄
//       2 开关控制，0：开始移动 1：停止移动
//       3 水平移动速度 [0 100]
//       4 垂直移动速度 [0 100]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZUpleft(ipcHandle handle, int control, int hSpeed, int vSpeed) ;


//说明：控制机械云台左下移动
//参数： 1 设备操作句柄
//       2 开关控制，0：开始移动 1：停止移动
//       3 水平移动速度 [0 100]
//       4 垂直移动速度 [0 100]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZDownleft(ipcHandle handle, int control, int hSpeed, int vSpeed) ;


//说明：控制机械云台右上移动
//参数： 1 设备操作句柄
//       2 开关控制，0：开始移动 1：停止移动
//       3 水平移动速度 [0 100]
//       4 垂直移动速度 [0 100]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZUpright(ipcHandle handle, int control, int hSpeed, int vSpeed) ;


//说明：控制机械云台右下移动
//参数： 1 设备操作句柄
//       2 开关控制，0：开始移动 1：停止移动
//       3 水平移动速度 [0 100]
//       4 垂直移动速度 [0 100]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPTZDownright(ipcHandle handle, int control, int hSpeed, int vSpeed) ;


//说明：获取视频编码帧率
//参数:  1 设备操作句柄
//       2 码流ID [0 3]
//       3 编码帧率 [ ]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetVideoFPS(ipcHandle handle, int streamID, OUT DWORD* fps) ;


//说明：设置视频编码帧率
//参数:  1 设备操作句柄
//       2 码流ID [0 3]
//       3 编码帧率 [ ]
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetVideoFPS(ipcHandle handle, int streamID, IN DWORD fps) ;

//说  明:启用禁用报警输出口
//参  数: [in] handle  设备操作句柄
//        [in] dwEnable 启用禁用标志： 0 禁用 1启用
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetOutputPortEnable(ipcHandle handle, IN DWORD dwEnable);

//说  明:启用禁用报警输入口
//参  数: [in] handle   设备操作句柄
//        [in] dwEnable 启用禁用标志： 0 禁用 1启用
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetInputPortEnable(ipcHandle handle, OUT DWORD dwEnable); 

//说  明:获取报警输入口启用禁用配置
//参  数: [in] handle   设备操作句柄
//        [out] dwEnable 启用禁用标志： 0 禁用 1启用
//返回：非0失败。
IPC_V30_API INT IPCAPI ipcGetInputPortEnable(ipcHandle handle, OUT DWORD* dwEnable); 

//说  明:获取报警输出口启用禁用配置
//参  数: [in] handle   设备操作句柄
//        [out] dwEnable 启用禁用标志： 0 禁用 1启用
//返回：非0失败。
IPC_V30_API INT IPCAPI ipcGetOutputPortEnable(ipcHandle handle, IN DWORD* dwEnable);


//说  明:设置DDNS服务器配置数据
//参  数: [in]  handle      设备操作句柄
//        [out] pDdnsParam  DDNS配置数据
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDDNSParam(ipcHandle handle,IPC_DDNSPARA* pDdnsParam) ;

//说  明:设置DDNS服务器配置数据
//参  数: [in]  handle       设备操作句柄
//        [in]  pDdnsParam   DDNS配置数据
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDDNSParam(ipcHandle handle,IPC_DDNSPARA* pDdnsParam) ;


//说  明:获取设备支持的分辨率和帧率信息
//参  数: [in]   handle            设备操作句柄
//        [in]   iStreanCount    码流数1-4,分别代表获取单码流 双码流 3码流 4码流对应的每个码流支持的分辨率，帧率信息
//        [out]  pImgInfo        分辨率帧率信息
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetSupportedImgInfo(ipcHandle handle,INT iStreanCount,IPC_AllImgInfo* pImgInfo) ;


//说  明:获取设备的码率
//参  数: [in]   handle            设备操作句柄
//        [in]   iStream        码流id  0~3 
//        [out]  pBitRate        码率信息
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetBitRate(ipcHandle handle,INT iStream,IPC_BitRate* pBitRate) ;

//说  明:获取设备支持的分辨率和帧率信息
//参  数: [in]   handle            设备操作句柄
//        [in]   iStream        码流id  0~3 
//        [in]   pBitRate        码率信息
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetBitRate(ipcHandle handle,INT iStream,IPC_BitRate* pBitRate) ;



//说  明:获取支持码流个数
//参  数: [in]    handle            设备操作句柄   
//        [out]   iStreamCount      实时流数据 1~4
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetSupportedStreamCount(ipcHandle handle,INT* iStreamCount) ;


//说  明:设置支持码流个数
//参  数: [in]    handle            设备操作句柄  
//        [in]   iStreamCount       实时流数据 1~4
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetSupportedStreamCount(ipcHandle handle,INT iStreamCount) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: DDNS信息回调
//参  数: [in]  pDdnsRecord     DDNS信息
//        [int] pUser            用户自定义数据
//返回：无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef void(CALLBACK * ipcDDNSCallBack)(IPC_DDNSRecord * pDdnsRecord,VOID *pUser);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 注册DDNS信息回调函数。
//参  数: [in] fDdnsCallBack  DDNS信息会回调函数
//        [int] pUser            用户自定义数据
 //返回： 非零失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDDNSServerCallBack(ipcDDNSCallBack fDdnsCallBack,VOID *pUser) ;


//说明：监听本地，等待IPC主动链接上报DDNS信息 。 
//参数：[in]  ip   需监听的网卡地址，设置为Null时为监听所有网卡。
//      [in]  port 监听的端口号。
//返回：失败返回非0。
IPC_V30_API INT IPCAPI ipcStartDdnsListen( const CHAR *ip,  INT port) ;

//说明：停止接DDNS信息。
//返回：失败返回非0。
IPC_V30_API INT IPCAPI ipcStopDdnsListen() ;


//说  明:获取设备当前的码流信息
//参  数: [in]    handle            设备操作句柄 
//        [in]    iStream            ]码流ID  0~3
//        [out]   pStreamInfo       当前设备码流信息
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetStreamInfo(ipcHandle handle,INT iStream,IPC_StreamInfo* pStreamInfo) ;


//说  明:获取设备当前各个码流信息
//参  数: [in]    handle            设备操作句柄   
//        [out]   pDevImgInfo       全部码流信息
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetCurAllStreamInfo(ipcHandle handle,IPC_DeviceImgInfo* pDevImgInfo) ;


//说  明:设置设备各个码流信息
//参  数: [in]    handle            设备操作句柄   
//        [in]    pDevImgInfo       全部码流信息
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetCurAllStreamInfo(ipcHandle handle,IPC_DeviceImgInfo* pDevImgInfo) ;


//说  明:获取设备序列号
//参  数: [in]     handle        设备操作句柄   
//        [out]    pStrSn       序列号,最长64
//        [in]     nLen         pStrSn 内存块长度
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceSN(ipcHandle handle,OUT CHAR* pStrSn,INT nLen) ;



//说  明:获取设备音频编码状态
//参  数: [in]    handle            设备操作句柄 
//        [out]   dwState           当前设备音频编码状态 0 禁用音频编码; 1 启用音频编码
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetAudioState(ipcHandle handle,DWORD* dwState) ;


//说  明:设置设备音频编码状态
//参  数: [in]    handle            设备操作句柄 
//        [in]    dwState           当前设备音频编码状态 0 禁用音频编码(禁用时不能语音对讲); 1 启用音频编码
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetAudioState(ipcHandle handle,DWORD dwState) ;



//说  明:设置设备IP信息
//参  数: [in]     handle        设备操作句柄   
//        [in]     lpIpInfo     设备IP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDeviceIPInfo(ipcHandle handle,IN CONST LPIPC_SYSIPINFO lpIpInfo) ;


//说  明:获取设备IP信息
//参  数: [in]     handle        设备操作句柄   
//        [out]    lpIpInfo     设备IP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceIPInfo(ipcHandle handle,OUT LPIPC_SYSIPINFO lpIpInfo) ;


//说  明:设置设备FTP信息
//参  数: [in]     handle        设备操作句柄   
//        [in]     lpFtpInfo    设备FTP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDeviceFTPInfo(ipcHandle handle,IN CONST LPIPC_SYSFTP lpFtpInfo) ;



//说  明:获取设备FTP信息
//参  数: [in]     handle        设备操作句柄   
//        [out]    lpFtpInfo    设备FTP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceFTPInfo(ipcHandle handle,OUT LPIPC_SYSFTP lpFtpInfo) ;



//说  明:设置设备SMTP信息
//参  数: [in]     handle        设备操作句柄   
//        [in]     lpSmtpInfo   设备SMTP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDeviceSMTPInfo(ipcHandle handle,IN CONST LPIPC_SYSSMTP lpSmtpInfo) ;



//说  明:获取设备SMTP信息
//参  数: [in]     handle        设备操作句柄   
//        [out]    lpSmtpInfo   设备SMTP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceSMTPInfo(ipcHandle handle,OUT LPIPC_SYSSMTP lpSmtpInfo) ;


//说  明:设置设备UPNP信息
//参  数: [in]     handle        设备操作句柄   
//        [in]     lpUpnpInfo     设备UPNP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDeviceUPNPInfo(ipcHandle handle,IN CONST LPIPC_SYSUPNPINFO lpUpnpInfo) ;



//说  明:获取设备SMTP信息
//参  数: [in]     handle        设备操作句柄   
//        [out]    lpUpnpInfo   设备UPNP信息结构
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceUPNPInfo(ipcHandle handle,OUT LPIPC_SYSUPNPINFO lpUpnpInfo) ;

//说  明:设置设备端口
//参  数: [in]     handle        设备操作句柄   
//        [in]     dwPort       设备通信端口
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDevicePort(ipcHandle handle,IN DWORD dwPort) ;

//说  明:设置设备视频制式
//参  数: [in]     handle         设备操作句柄   
//        [in]     dwVideoFormat 视频制式 [1-NTSC,2-PAL ]
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcSetDeviceVideoFormat(ipcHandle handle,IN DWORD dwVideoFormat) ;


//说  明:获取设备视频制式
//参  数: [in]     handle         设备操作句柄   
//        [in]     dwVideoFormat 视频制式 [1-NTSC,2-PAL ]
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDeviceVideoFormat(ipcHandle handle,IN DWORD* dwVideoFormat) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:查找设备的日志信息
//参  数: [in]   handle                ipcCreateDevice的返回值
//        [in]   dwLogType          日志类型：0－全部；1－访问日志；2－报警日志；4－系统日志，可按位组合 
//        [in]   lpStartTime        开始时间，传NULL,将忽略该参数
//        [in]   lpStopTime            结束时间，传NULL,将忽略该参数
//返回：-1表示失败，其值作为ipcFindNextLog等函数的参数。
IPC_V30_API LONG IPCAPI ipcFindLog(ipcHandle handle,DWORD dwLogType,LPIPC_TIME  lpStartTime,LPIPC_TIME lpStopTime);
 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:逐条获取查找到的日志信息。
//参  数: [in]    lLogHandle         日志查找句柄，ipcFindLog的返回值
//        [out]   lpLogData          保存日志信息的指针 
//返回：-1表示失败，其他值表示当前的获取状态等信息（参考日志查找结果宏定义）。
// 在调用该接口获取查找日志之前，必须先调用ipcFindLog得到当前的查找句柄。
IPC_V30_API LONG IPCAPI ipcFindNextLog(LONG lLogHandle,LPIPC_LOG lpLogData);
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:释放查找日志的资源。
//参  数: [in]    lLogHandle         日志查找句柄，ipcFindLog的返回值
//        [out]   lpLogData          保存日志信息的指针 
//返回：0表示成功，-1表示失败。
IPC_V30_API LONG IPCAPI ipcFindLogClose(LONG lLogHandle);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置日志保存策略。
//参  数: [in]    handle              ipcCreateDevice的返回值
//        [in]   lpLogConfig          日志配置信息 
//返回：0 表示成功，-1表示失败 。
IPC_V30_API BOOL IPCAPI ipcSetLogConfig(ipcHandle  handle,LPIPC_LOG_CONFIG lpLogConfig);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取日志保存策略。
//参  数: [in]    handle                ipcCreateDevice的返回值
//        [out]   lpLogConfig           日志配置信息 
//返回：0 表示成功，-1表示失败 。
IPC_V30_API BOOL IPCAPI ipcGetLogConfig(ipcHandle  handle,LPIPC_LOG_CONFIG lpLogConfig);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:根据日志ID删除指定日志。
//参  数: [in]    handle                ipcCreateDevice的返回值
//        [in]     pID                  日志ID数组
//        [in]    nCount                 pID 里面包含的日志ID个数
//返回：0 表示成功，-1表示失败 。
IPC_V30_API BOOL IPCAPI ipcDeleteLogById(ipcHandle  handle,INT* pID,INT nCount);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:清空全部日志。
//参  数: [in]    handle                ipcCreateDevice的返回值
//返回：0 表示成功，-1表示失败 。
IPC_V30_API BOOL IPCAPI ipcClearLog(ipcHandle  handle);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:查询日志个数
//参  数: [in]   handle                ipcCreateDevice的返回值
//        [in]   dwLogType          日志类型：0－全部；1－访问日志；2－报警日志；4－系统日志，可按位组合 
//        [in]   lpStartTime        开始时间，传NULL,将忽略该参数
//        [in]   lpStopTime            结束时间，传NULL,将忽略该参数
//        [out]  pRetCount          日志个数
//返回：-1表示失败，0成功。
IPC_V30_API LONG IPCAPI ipcQueryLogCount(ipcHandle handle,DWORD dwLogType,LPIPC_TIME  lpStartTime,LPIPC_TIME lpStopTime,INT* pRetCount );

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:删除符合条件的日志
//参  数: [in]   handle                ipcCreateDevice的返回值
//        [in]   dwLogType          日志类型：0－全部；1－访问日志；2－报警日志；4－系统日志，可按位组合 
//        [in]   lpStartTime        开始时间，传NULL,将忽略该参数
//        [in]   lpStopTime            结束时间，传NULL,将忽略该参数
//返回：-1表示失败，0成功。
IPC_V30_API LONG IPCAPI ipcDeleteLog(ipcHandle handle,DWORD dwLogType,LPIPC_TIME  lpStartTime,LPIPC_TIME lpStopTime );

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:导出日志到文件
//参  数: [in]   handle                ipcCreateDevice的返回值
//        [in] filePath      :         保存保存日志信息的文件路径
//返回：-1表示失败，0成功。
IPC_V30_API INT IPCAPI ipcExportLog(ipcHandle handle,const WCHAR * filePath) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置播放缓冲区缓冲时间
//参数：[in] handle 预览句柄 ipcCreateLivePlay的返回值
//      [in] time   缓冲时间 单位毫秒，取值区间[0--1000]
//返回：正确返回0，错误返回非0。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetBufferTime(playHandle handle,CONST DWORD time) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取播放缓冲区缓冲时间
//参数：[in]  handle 预览句柄 ipcCreateLivePlay的返回值
//      [out] time 缓冲时间 单位毫秒，取值区间[0--1000]
//返回：正确返回0，错误返回非0。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetBufferTime(playHandle handle,DWORD* time) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：录像文件下载
//参数：[in]  设备句柄
//      [in]  设备录像的文件名 小于128字节
//      [in]  本地保存的文件名 绝对路径
//      [in]  保存的文件格式  0:ipc (暂时仅支持ipc) 
//      [in]  端点续传结构 [保留接口,暂未支持] 
//返回：正确返回下载句柄，错误返回小于0
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcDownloadByRecordName(ipcHandle handle,char* recordName, char* sSaveName ,DWORD dwFileType = 0 ,LPIPC_RECORDDOWNLOADINFO pRDInfo = NULL ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：停止录像文件下载
//参数：[in]  设备句柄
//返回：正确返回大于等于0，错误返回小于0
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopDownload( LONG handle ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取录像文件下载进度
//参数：[in]  设备句柄
//返回：0～100表示下载的进度；100表示下载结束；正常范围0-100。错误返回小于0
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDownloadPos( LONG handle ) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取错误代码
//参数：
//      
//返回：返回错误码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetLastError_V2() ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取错误代码
//参数：
//      
//返回：返回错误码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API VOID IPCAPI ipcSetLastError_V2(INT err) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取电子快门时间的最小值取值范围
//参数：[in]            handle ipcCreateDevice的返回值
//      [out]            pMinRangeArray 存放电子快门时间的一维数组地址，数组大小不小于30
//      [in/out]        pArraySize 输入数组的大小，以及返回数组内有效元素的个数
//返回：正确返回0，错误返回非0。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetShutterTimeMinRange(ipcHandle handle, DWORD* pMinRangeArray, DWORD* pArraySize) ; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取电子快门时间中最小值所对应的最大值取值范围
//参数：[in]            handle ipcCreateDevice的返回值
//      [in]            dwMinValue 电子快门时间的最小值
//      [out]            pMinRangeArray 存放数值一维数组地址，数组大小不小于30
//      [in/out]        pArraySize 输入数组的大小，以及返回数组内有效元素的个数
//返回：正确返回0，错误返回非0。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetShutterTimeMaxRange(ipcHandle handle, DWORD dwMinValue, DWORD* pMaxRangeArray, DWORD* pArraySize) ; 

//查询录像文件//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：根据文件类型、时间查找设备录像文件
//参数：
//handle 
//[in] ipcCreateDevice的返回值
//lChannel 
//[in] 通道号 
//dwFileType 
//[in] 要查找的文件类型：
//位与结果为0表示不启用，1表示启用
//dwFileType & 0x0001，表示是否查询定时录像文件
//dwFileType & 0x0002，表示是否查询手动录像文件
//dwFileType & 0x0004，表示是否查询报警录像文件
//dwFileType & 0x0008，表示是否查询移动桢测录像文件
//dwFileType & 0x0010，表示是否查询断网录像文件
//dwFileType & 0x0020，表示是否查询视频异常录像文件 
//lpStartTime 
//[in] 文件的开始时间 
//lpStopTime 
//[in] 文件的结束时间
//返回：-1表示失败，其他值作为ipcRecordFindClose等函数的参数
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcFindRecordFile(ipcHandle handle, LONG lChannel, DWORD dwFileType, LPIPC_TIME lpStartTime, LPIPC_TIME lpStopTime) ; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：逐个获取查找到的文件信息
//参数：
//lFindHandle 
//[in] 文件查找句柄，ipcFindRecordFile的返回值 
//lpFindData 
//[out] 保存文件信息的指针
//返回：-1表示失败，其他值表示当前的获取状态等信息如获取文件信息成功、没有更多的文件，查找结束、查找文件时异常
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcFindNextRecordFile(LONG lFindHandle, LPIPC_FIND_DATA lpFindData) ; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：关闭文件查找，释放资源
//lFindHandle 
//[in] 文件查找句柄ipcFindRecordFile的返回值 
//返回：0表示成功，-1表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcFindRecordClose(LONG lFindHandle);

//录像控制
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：控制录像文件等操作
//参数：
//handle 
//[in] ipcCreateDevice的返回值
//dwControlCode
//[in] 控制录像命令，        见下表   宏定义                    宏定义值          含义 
//                                    IPC_RECORDSTART            1                开始录像 
//                                    IPC_RECORDSTOP             2                停止录像 
//                                    IPC_DELETEFILE             3                删除录像文件 
//                                    IPC_LOCKFILE               4                锁定录像文件 
//                                    IPC_UNLOCKFILE             5                解锁录像文件
//                                    IPC_GET_RECORDCONFIG       6                获取录像文件分割大小信息
//                                    IPC_SET_RECORDCONFIG       7                设置录像文件分割大小
//lpInBuffer
//[IN] 指向输入参数的指针
//dwInLen
//[in] 输入参数的长度
//lpOutBuffer
//[out] 指向输出参数的指针
//lpOutLen
//[out] 输出参数的长度
//返回：0表示成功，-1表示失败
//备注
//状态命令宏定义                    状态命令说明                    lpInBuf                                  lpOutBuf 
//IPC_RECORDSTART                   开始录像                        一个IPC_RECORD_CTRL的指针                无 
//IPC_RECORDSTOP                    停止录像                        一个IPC_RECORD_CTRL的指针                无 
//IPC_DELETEFILE                    删除录像文件                    一个长度小于128个字符的录像文件名        无
//IPC_GET_RECORDCONFIG              获取录像文件分割大小信息        无                                       IPC_RECORD_CONFIG的指针 
//IPC_SET_RECORDCONFIG              设置录像文件分割大小            IPC_RECORD_CONFIG的指针                  无 
///////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRecordControl(ipcHandle handle, DWORD dwControlCode, char* lpInBuffer, DWORD dwInLen, char* lpOutBuffer, DWORD* lpOutLen);


//说  明:获取设备能力
IPC_V30_API INT IPCAPI ipcGetDeviceAbility( ipcHandle handle_,DWORD dwAbilityType,char *pInBuf,DWORD dwInLength ,char* pOutBuf,DWORD dwOutLength ) ;
//说  明:获取工作状态
IPC_V30_API INT IPCAPI ipcGetWorkState(ipcHandle handle_,LPIPC_WORKSTATE    lpWorkState) ;
//说  明:获取xml格式工作状态
IPC_V30_API INT IPCAPI ipcGetWorkStateXml(ipcHandle handle,char* pOutBuf,DWORD dwOutLength ) ;
//说  明:设置云台守望[不支持]
IPC_V30_API INT IPCAPI ipcSetPtzHomeCfg(ipcHandle handle_,IPC_PTZHOME_CFG  stPtzHomeCfg) ;
//说  明:获取云台守望[不支持]
IPC_V30_API INT IPCAPI ipcGetPtzHomeCfg(ipcHandle handle_,LPIPC_PTZHOME_CFG  lpPtzHomeCfg) ;
//说  明:三维定位[不支持]
IPC_V30_API INT IPCAPI ipcPtz3DCtrl(ipcHandle handle_,IPC_PTZ3DCTRL  stPtz3DCtrl) ;

IPC_V30_API LONG IPCAPI ipcEnableSound_Internal(ipcHandle handle_,int streamID_,int flag);
IPC_V30_API BOOL IPCAPI ipcOpenSound_Internal(playHandle    hPlayer);
IPC_V30_API BOOL IPCAPI ipcCloseSound_Internal();

IPC_V30_API BOOL IPCAPI ipcOpenSoundShare_Internal(playHandle   hPlayer);
IPC_V30_API BOOL IPCAPI ipcCloseSoundShare_Internal(playHandle  hPlayer);


typedef VOID( WINAPI*ipcfAllVoiceDataCallBack)( LONG  lVoiceComHandle,char  *pRecvDataBuffer,DWORD  dwBufSize,BYTE  byAudioFlag,void  *pUser);

typedef VOID( WINAPI*ipcfVoiceDataCallBack)(char  *pRecvDataBuffer,DWORD  dwBufSize,void  *pUser);
//语音对讲 
IPC_V30_API LONG IPCAPI ipcStartVoiceCom(ipcHandle handle,DWORD dwVoiceChan,BOOL bNeedCBNoEncData,ipcfAllVoiceDataCallBack  cbVoiceDataCallBack,void *pUser);
IPC_V30_API BOOL IPCAPI ipcSetVoiceComClientVolume(LONG   lVoiceComHandle,WORD     wVolume);
IPC_V30_API BOOL IPCAPI ipcStopVoiceCom(LONG lVoiceComHandle);

//语音转发
IPC_V30_API LONG IPCAPI ipcStartVoiceCom_MR(ipcHandle handle,DWORD dwVoiceChan,ipcfAllVoiceDataCallBack  cbVoiceDataCallBack,void *pUser);
IPC_V30_API BOOL IPCAPI ipcVoiceComSendData(LONG lVoiceComHandle,char *pSendBuf,DWORD dwBufSize);

//语音广播  暂不实现 
IPC_V30_API BOOL IPCAPI ipcClientAudioStart(ipcfVoiceDataCallBack  cbVoiceDataCallBack,void *pUser);
IPC_V30_API BOOL IPCAPI ipcClientAudioStop();

IPC_V30_API LONG IPCAPI ipcAddDevice(ipcHandle handle,DWORD dwVoiceChan);
IPC_V30_API BOOL IPCAPI ipcDelDevice(ipcHandle handle);

IPC_V30_API LONG IPCAPI ipcEncodeG711Frame( LONG lType, unsigned char*pInBuffer,unsigned int iInLen, unsigned char*pOutBuffer, unsigned int* lpOutLen ) ;
IPC_V30_API LONG IPCAPI ipcDecodeG711Frame( LONG lType, unsigned char*pInBuffer,unsigned int iInLen, unsigned char*pOutBuffer, unsigned int* lpOutLen ) ;

IPC_V30_API LONG IPCAPI ipcSetAudioEnableIPC30_Internal(ipcHandle handle_,DWORD streamId_ ,DWORD dwFlag_ ) ;
IPC_V30_API LONG IPCAPI ipcGetAudioEnableIPC30_Internal(ipcHandle handle_,DWORD streamId_ ,DWORD* dwFlag_ ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置云台区域缩放
//参数：[in]            handle ipcCreateDevice的返回值
//      [in]            lChannel 流ID (默认填0，暂时保留)
//      [in]            pStruPointFrame 缩放信息
//返回：正确返回0，错误返回非0。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API LONG IPCAPI ipcPTZSelZoomIn( ipcHandle handle,LONG lChannel,LPIPC_POINT_FRAME pStruPointFrame ) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取设备上所有用户信息
//handle_ 
//[in] ipcCreateDevice的返回值 
//lpUser_
//[in/out] 保存用户信息的指针
//返回：0表示成功，-1表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetUserInfo(ipcHandle handle_, LPIPC_USER lpUser_) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置设备上用户信息
//handle_ 
//[in] ipcCreateDevice的返回值 
//lpUser_
//[in/out] 保存用户信息的指针
//返回：0表示成功，-1表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetUserInfo(ipcHandle handle_, LPIPC_USER lpUser_) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:控制机械云变倍 
//参  数: [in]		handle				ipcCreateDevice的返回值
//        [in]      zPosition           //放大倍数,应大于等于0且是10的整数倍,0表示原始大小即放大1倍,10表示原始大小放大2倍,20表示放大原始大小3倍,
										//zPosition/10+1为放大的倍数,zPosition的最大值180（该值由硬件设备决定）,传递的值超过设备支持的最大值时，设备自动设置为最大值。 
//返回：0 表示成功，-1表示失败 。		
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetPTZZoom( ipcHandle handle, int zPosition ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取控制机械云变倍数 
//参  数: [in]		handle				ipcCreateDevice的返回值
//        [in]      pZPosition           //放大倍数,应大于等于0且是10的整数倍,0表示原始大小即放大1倍,10表示原始大小放大2倍,20表示放大原始大小3倍,
										//zPosition/10+1为放大的倍数,zPosition的最大值180（该值由硬件设备决定）,传递的值超过设备支持的最大值时，设备自动设置为最大值。 
//返回：0 表示成功，-1表示失败 。		
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetPTZZoom( ipcHandle handle, int* pZPosition ) ;

#endif//_IPC_SDK_V30_H_