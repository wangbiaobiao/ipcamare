
#ifndef  __IPC_SDKBACKUP_V30_H_

#define	__IPC_SDKBACKUP_V30_H_


#ifdef IPCSDK_EXPORTS
#define  IPC_V30_API extern "C" __declspec(dllexport)
#else
#define IPC_V30_API extern "C"  __declspec(dllimport)
#endif


#include "IPCDefine.h"
#include "IPCSdkDefines.h"
#include "IPCSdkDefinesBackup.h"

#define IPCAPI __cdecl

//------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 正常消息回调函数,设备返回值
//参数： 1 操作句柄 
//       2 事件类型  
//		 3 上下文 
//		 4 设置时传入的回调参数
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcNormalMsgCallback)(ipcHandle hDevice,INT iType ,LPVOID lpContext ,LPVOID lpParams) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置连接回调函数，该回调返回异步的信息通知
//参数：1 操作句柄
//		2 回调函数指针 
//		3 用户数据。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRegisterMsgCallBack(ipcHandle handle, ipcNormalMsgCallback pCallBack, LPVOID context) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：判断设备是否已经建立连接。
//参数：1 操作句柄。
//返回：0-链接  非0-断开。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcIsConnected( ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：配置工作模式（是否进行异步/同步的API返回）
//参数：是否同步模式工作，是否接收异步信息
//返回：
//备注：若只需要同步则关闭异步，若只需要异步则关闭同步，不可同时关闭，若同时打开则在同步模式工作接收返回同时也能接收到异步返回值
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//IPC_V30_API VOID IPCAPI ipcSetSdkInteraction (BOOL bAsyncEnable,BOOL bSyncEnable) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：配置是否启用视频缩放效果优化
//参数：是否开启
//返回：无
//备注：此开关用来控制图像缩放输出，开启时能提升图像呈现效果但相应的耗费更多CPU
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//IPC_V30_API VOID IPCAPI ipcEnableVideoResize (BOOL bEnable) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:重连
//参数：
//1 设备操作句柄
//2 超时时间 默认5秒
//3 尝试次数 默认3次
//3 重连动作类型，0表示自动重连 1表示手动重连 默认自动重连
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcReconnectDevice(ipcHandle handle, DWORD dwAutoConnectionTime, INT Frequency, INT Type);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////说明：在本地局域网中查找在线设备，结果以消息回调函数返回。
//////////参数：1 操作句柄
//////////2 回调函数指针 
//////////3 用户数据。
//////////返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////IPC_V30_API INT ipcFindDevice() ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置视频是否显示
//参数：1 预览句柄
//      2 是否显示
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetDisplayVisible(playHandle handle,IN CONST BOOL bVal) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取视频是否显示的情况
//参数：1 预览句柄
//      2 返回是否显示
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDisplayVisible(playHandle handle,OUT BOOL* bVal) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取视频缩放
//参数：1 预览句柄
//      2 缩放区域
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetZoom(playHandle handle,OUT RECT* rect ) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置视频缩放
//参数：1 预览句柄
//      2 缩放区域
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetZoom(playHandle handle,CONST RECT rect) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设备抓拍。
//参数：1. 播放句柄
//      2. 文件描述标识
//      3. 文件描述标识长度
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceSnopshot ( playHandle hPlayer ,OUT BYTE* fileDiscript,OUT INT* fileDiscriptLen) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:从设备处获取其工作能力
//参  数: 
//1  操作句柄
//2  设备工作能力结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceInfo( ipcHandle handle, OUT LPVOID lpDeviceInfo ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 报警消息回调函数,设备返回值
//参数： 1 操作句柄 2事件类型  3上下文
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcAlarmMsgCallback)(ipcHandle ,INT,LPVOID ,LPVOID) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：注册报警回调函数，该回调返回报警信息通知
//参数：1 操作句柄
//2 回调函数指针 
//3 用户数据。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRegisterAlarmCallBack(  ipcHandle handle, ipcAlarmMsgCallback pCallBack, LPVOID context) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:开始报警响应
//参  数: 
//返回：大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAlarmStart( ipcHandle handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:停止报警响应
//参  数: 
//返回：大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAlarmStop( ipcHandle handle) ;


//SD卡管理

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 根据文件名检索文件属性
//参数:
//1 设备句柄
//2 文件名
//3 文件属性信息
//返回值  ： 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcScanRecordInfoByType (  ipcHandle handle, const char* name, LPVOID pSDCardInfo) ;


//定时录像


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取定时录像事件
//参  数: 
//1 设备操作句柄
//2 0:码流1， 1:码流2 ，2:码流3  ，3:码流4
//3 文件保存类型，有IPC_RECORD_FILELOCATION_FTP，IPC_RECORD_FILELOCATION_SDCARD
//4 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//5 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetTimingRecord(ipcHandle handle, OUT DWORD* streamID, OUT DWORD* location, OUT DWORD** start_time, OUT DWORD** end_time) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置定时录像事件
//参  数: 
//1 设备操作句柄
//2 0:码流1， 1:码流2 ，2:码流3  ，3:码流4
//3 文件保存类型，有IPC_RECORD_FILELOCATION_FTP，IPC_RECORD_FILELOCATION_SDCARD
//4 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//5 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetTimingRecord(ipcHandle handle, IN DWORD streamID, IN DWORD location,IN DWORD start_time[7][IPC_MAX_TIME_SEC], IN DWORD end_time[7][IPC_MAX_TIME_SEC]) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 异常消息回调函数,设备返回值
//参数： 1 操作句柄 2事件类型  3上下文
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef VOID (WINAPI *ipcErrorMsgCallback)(ipcHandle ,INT,LPVOID,LPVOID) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置连接回调函数，该回调返回错误的信息通知
//参数：1 操作句柄
//2 回调函数指针 
//3 用户数据。
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcRegisterErrorMsgCallBack(  ipcHandle handle, ipcErrorMsgCallback pCallBack, LPVOID context) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 获取设备状态
//参数:
//1 设备句柄
//2 设备状态信息
//返回值  ： 大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceStateInfo( ipcHandle handle, LPVOID info) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 导出设备配置
//参数:
//1 设备句柄
//2 保存设备配置文件地址
//返回值  ： 大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcExportDeviceConfig( ipcHandle handle, CONST CHAR* lpFilename) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 导入设备配置
//参数:
//1 设备句柄
//2 保存设备配置文件地址
//返回值  ： 大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcImportDeviceConfig( ipcHandle handle, CONST CHAR* lpFilename) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 获取账号密码
//参数:
//1 设备句柄
//2 账号
//3 密码
//返回值  ： 大于0表示成功，小于0表示失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetDeviceUserAccount( ipcHandle handle, CHAR* lpAcc, CHAR* lpPwd) ;

//日志管理

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:读取设备日志
//参  数: 
//1 操作句柄，
//2 日志存放地址
//3 输入buffer长度，返回日志长度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcImportDeviceLog( ipcHandle handle,const CHAR* lpBuffer,INT* size) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:删除设备日志
//参  数: 
//1 操作句柄，
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeleteDeviceLog( ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:导出设备日志
//参  数: 
//1  操作句柄
//2  日志存放文件
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcExportDeviceLog( ipcHandle handle, const CHAR* lpFilename) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:实现设备启动功能
//参数:
//1 设备操作句柄
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceStarts(ipcHandle handle) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明:实现设备关闭功能
//参数:
//1 设备操作句柄
//返回: 错误代码
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDeviceStop(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:重新初始化语音对讲
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioReinit(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:开始语音对讲捕获
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioStartCapture(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:停止语音对讲捕获
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioStopCapture(ipcHandle handle) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetBalance(ipcHandle handle,int type,long* balance) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetBalance(ipcHandle handle,int type,long balance) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMute(ipcHandle handle,int type,bool* mute) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//        2 声音类型，1:远端IPC, 0:本地。目前仅支持设置远端IPC音量,本地音量不支持
//		  3 是否静音
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMute(ipcHandle handle,int type,bool mute) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetAudioChannels(ipcHandle handle,int type,long* channel) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioChannels(ipcHandle handle,int type,long channel) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetAudioChannelMode(ipcHandle handle,int type,long* mode) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioChannelMode(ipcHandle handle,int type,long mode) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取设备重启报警布防.暂不支持，默认为全天有效
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetRebootPlan(ipcHandle handle, OUT DWORD** start_time, OUT DWORD** end_time) ;


//设备重启
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置设备重启报警布防.暂不支持设置，默认为全天有效
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetRebootPlan(ipcHandle handle, IN DWORD start_time[7][IPC_MAX_TIME_SEC], IN DWORD end_time[7][IPC_MAX_TIME_SEC]) ;



//配置修改报警
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取设备配置修改报警布防.暂不支持，默认为全天有效
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetConfigChangedPlan(ipcHandle handle, OUT DWORD** start_time, OUT DWORD** end_time) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置设备配置修改报警布防.暂不支持，默认为全天有效
//参  数: 
//1 开始时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//  3：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//2 结束时间的7*16二维数组，一维元素表示日期0：星期日、1：星期一、2：星期二、
//3 ：星期三、4：星期四、5：星期五、6：星期六，二维元素表示时间段00:00到23:59
//  之间
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetConfigChangedPlan(ipcHandle handle, IN DWORD start_time[7][IPC_MAX_TIME_SEC], IN DWORD end_time[7][IPC_MAX_TIME_SEC]) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取设备重启事件配置
//参  数: 1 设备操作句柄
//2 动作响应设置信息
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetRebootEvent(ipcHandle handle,  OUT IPC_ActionOptionInfo* action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置设备重启事件配置
//参  数: 1 设备操作句柄
//2 响应动作设置，见ActionOptionInfo数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetRebootEvent(ipcHandle handle, IN IPC_ActionOptionInfo action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取配置改变事件
//参  数: 1 设备操作句柄
//2 动作响应设置信息
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetConfigChangedEvent(ipcHandle handle,OUT IPC_ActionOptionInfo* action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置配置改变事件
//参  数: 1 设备操作句柄
//2 响应动作设置，见ActionOptionInfo数据结构
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetConfigChangedEvent(ipcHandle handle, IN IPC_ActionOptionInfo action_option) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 设置心跳间隔
//参数:
//1 设备操作句柄
//2 心跳间隔
//3 回调
//4 回调参数
//返回值  ： 是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartHeartbeat(ipcHandle handle, DWORD interval,ipcHeartBeatCallback callback,LPVOID context) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 设置心跳间隔扩展（支持设备连接前使用）
//参数:
//1 设备操作句柄
//2 心跳间隔
//3 设备ip
//4 回调
//5 回调参数
//返回值  ： 是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStartHeartbeatEx(ipcHandle handle, DWORD interval,const CHAR* ip,ipcHeartBeatCallback callback,LPVOID context) ;
IPC_V30_API INT IPCAPI ipcSetHeartbeatEx2(ipcHandle handle_, DWORD interval_,const CHAR* ip_,ipcHeartBeatCallback callback_,LPVOID context_) ;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//函数功能： 结束心跳
//参数:
//1 设备操作句柄
//返回值  ： 是否成功
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcStopHeartbeat(  ipcHandle handle) ;




/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:初始化语音对讲
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioInit(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:释放语音对讲资源
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioDone(ipcHandle handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:播放语音对讲
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioPlay(ipcHandle handle) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:停止语音对讲
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioStop(ipcHandle handle) ;



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取语音对讲音量
//参  数: 1 操作句柄,
//		  2 声音类型，1:远端IPC, 0:本地。目前仅支持获取远端IPC音量,本地音量不支持
//		  3 音量大小(百分比)，0 - 100%
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetVolume(ipcHandle handle,int type,long* volume) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置语音对讲音量
//参  数: 1 操作句柄
//        2 声音类型，1:远端IPC, 0:本地。目前仅支持设置远端IPC音量,本地音量不支持
//		  3 音量大小(百分比)，0 - 100%
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetVolume(ipcHandle handle,int type,long volume) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 设置语音对讲前端IPC回声抑制
//参  数: 1 操作句柄
//        2 语音对讲配置参数
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioCannceller(ipcHandle handle,LPIPC_AUDIOCONF lpAudioConf) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:语音对讲配置
//参  数: 1 操作句柄
//        2 配置信息
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioSetting(ipcHandle handle ,int type,LPIPC_AUDIOCONF lpAudioConf) ;

//说  明:创建音频传输句柄.用于转发语音数据到前端设备.
//参  数: 1 设备操作句柄
//        2 设备地址
//        3 端口:前端设备默认端口35000
//        4 用户名
//        5 密码
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API HANDLE IPCAPI ipcCreateTransHandle(ipcHandle handle,const char* ip,int port,const char* user,const char* password) ;


//说  明:销毁音频传输句柄
//参  数: 1 设备操作句柄
//        2 音频操作句柄
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcDestroyTransHandle(ipcHandle handle,HANDLE audioHandle) ;


//说  明:发送编码后音频数据
//参  数: 1 音频操作句柄
//        2 类型 1 711 ,0 amr(暂不支持amr)
//		  3 数据
//		  4 数据长度
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioSend(HANDLE audioHandle,INT type,const char* data,int len) ;


//说  明:对音频数据进行编码
//参  数: 1 音频操作句柄
//        2 类型 1 711 ,0 amr(暂不支持amr)
//		  3 数据源
//		  4 数据源长度
//		  5 编码后数据
//		  6 编码后数据长度
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcAudioEncode(HANDLE audioHandle,INT type,const char* src,int srclen,char* out,int* outlen) ;

 

//说  明:设置事件使能
//参  数: 1 设备操作句柄
//		  2 报警事件类型
//		  3 告警使能标志
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAllEventEnable(ipcHandle handle, IN DWORD dwEnable) ;


//说  明:设置配置改变事件
//参  数: 1 设备操作句柄
//		  2 报警事件类型
//		  3 告警使能标志
//返回：非0失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetAllEventEnable(ipcHandle handle, OUT DWORD* dwEnable) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：直接播放音频数据。
//参数：
//1 设备句柄
//2 音频类型 1 :711,0 amr(暂不支持)
//3 音频数据
//4 音频数据长度
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcPlayAudioStream(ipcHandle handle ,int type, unsigned char* data, unsigned int data_len) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明： 音频数据回调函数,设备返回值
//参数： 1 操作句柄 
//		 2 类型  :1远端，2 本地 ，-2 连接断开 ，-1 数据接收完毕
//		 3 数据指针 
//		 4 数据长度 
//		 5 用户参数
//返回： 无
/////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef INT (WINAPI *ipcNormalAudioCallback)(ipcHandle hAudio, INT iType ,const unsigned char* Data ,INT iDataLen,LPVOID lpContext);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置语音对讲回调
//参  数: 1 操作句柄
//
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAudioCallback(ipcHandle handle ,ipcNormalAudioCallback func,LPVOID lpContext) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置设备I帧间隔
//参数：设备句柄
//   2. 通道id  
//   3. I帧间隔: 取值范围[1,8]秒
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetIDRInterval ( ipcHandle handle,DWORD dwStreamId,DWORD interval) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取设备I帧间隔
//参数：设备句柄
//   2. 通道id  
//   3. 返回I帧间隔 , 取值范围[1,8]秒
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetIDRInterval ( ipcHandle handle,DWORD dwStreamId,DWORD* interval) ;



//移动侦测
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取移动侦测事件信息
//参  数: 
//1 设备操作句柄
//2 移动侦测窗口有效个数
//3 移动侦测窗口结构数组指针，设置为4个元素的数组
//4 响应动作设置，ActionOptionInfo数据结构的指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMontionDetectionEvent(ipcHandle handle, OUT DWORD* window_count, OUT LPIPC_MontionDetectionWindowInfo lpMDWindowArray, OUT IPC_ActionOptionInfo* action_option);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置移动侦测事件信息
//参  数: 
//1 设备操作句柄
//2 移动侦测窗口有效个数,
//3 移动侦测窗口结构数组指针
//4 响应动作设置，ActionOptionInfo数据结构的指针
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMontionDetectionEvent(ipcHandle handle, IN DWORD window_count, IN LPIPC_MontionDetectionWindowInfo lpMDWindowArray, IN IPC_ActionOptionInfo action_option) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:获取移动侦测窗口信息
//参  数: 
//1 设备操作句柄
//2 移动侦测事件信息,
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcGetMontionDetectionWindowInfo(ipcHandle handle, OUT IPC_MontionDetectionWindowInfo* mdi) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置移动侦测窗口信息
//参  数: 
//1 设备操作句柄
//2 移动侦测事件信息
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetMontionDetectionWindowInfo(ipcHandle handle, IN IPC_MontionDetectionWindowInfo mdi_[4]) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明:设置IPv4地址
//参  数: 
//1   操作句柄
//2   ip地址保存结构
//返回：错误代码。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetIPv4( ipcHandle handle, const IPC_SYSIPINFO* lpIpv4Info) ;


//说  明:视频流数据输入,流式解码播放
//参  数: [in]   hPlayer		播放句柄
//		  [in]   pFrame         实时流数据 
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcInputData(playHandle hPlayer, PIPC_PLAYER_FRAME* pFrame);

//说  明:视频流数据输入,流式解码播放
//参  数: [in]   hPlayer		播放句柄
//		  [in]   lType          流数据类型 
//		  [in]   pFrameBuff		帧数据
//		  [in]   len			数据块pFrameBuff长度
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcInputData_V2(playHandle hPlayer, long lType, BYTE* pFrameBuff, LONG len) ;

 

typedef void(CALLBACK * ipcAlarmParseCallBack)(INT nParser,LONG lType,IPC_ALARMER *pAlarmer,CHAR *pAlarmInfo,DWORD dwBufLen,VOID *pUser);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说  明: 注册告警协议解析回调函数。
//参  数: 1 告警信息会回调函数
//        2 用户自定义数据
//返回： 非零失败。
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI ipcSetAlarmParserCallBack(ipcAlarmParseCallBack fAlarmParseCallBack,VOID *pUser) ;

//说明：创建报警协议解析器。
//返回：失败返回0。
IPC_V30_API INT IPCAPI ipcCreateParser() ;

//说明：解析报警信息，当解析出完整报警信息时通过回调函数通知。
//返回：失败返回-1。
IPC_V30_API INT IPCAPI  ipcParse(INT nParser,unsigned char* pBuff, int nLen) ;

//说明：重置报警协议解析器。
//返回：失败返回-1。
IPC_V30_API INT IPCAPI ipcResetParser(INT nParser) ;

//说明：销毁报警协议解析器。
//返回：失败返回-1。
IPC_V30_API INT IPCAPI ipcDestroyParser(INT nParser) ;

//err function name ,reserverd only for dll load
IPC_V30_API INT IPCAPI ipcPTZPostionControl( ipcHandle handle,  int cmdType, LPIPC_PTZ_POSTION_PARAM pPosition ) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：设置设备通信端口号
//参数：
//   [in] 设备句柄
//   [in] 端口号  
//返回：错误代码。等于0成功 ,小于0失败
//备注：当通信端口号变更其他端口号会按此端口依次递增，设置成功后需要重新将sdk与设备连接
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI  ipcSetDevicePort_Root_Internal(ipcHandle handle,OUT DWORD dwPort) ;

//IPC_V30_API INT IPCAPI  ipcSetDevicePort_AudioIn_Internal(ipcHandle handle,OUT DWORD pPort) ;
//
//IPC_V30_API INT IPCAPI  ipcSetDevicePort_AudioOut_Internal(ipcHandle handle,OUT DWORD pPort) ;
//
//IPC_V30_API INT IPCAPI  ipcSetDevicePort_Video_Internal(ipcHandle handle,OUT DWORD pPort) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取设备对讲端口
//参数：
//   [in]  设备句柄
//   [out] 端口号  
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI  ipcGetDevicePort_AudioIn_Internal(ipcHandle handle,OUT DWORD* pPort) ;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取设备监听端口
//参数：
//   [in]  设备句柄
//   [out] 端口号  
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI  ipcGetDevicePort_AudioOut_Internal(ipcHandle handle,OUT DWORD* pPort) ;


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//说明：获取设备码流端口
//参数：
//   [in]  设备句柄
//   [out] 端口号  
//返回：错误代码。等于0成功 ,小于0失败
/////////////////////////////////////////////////////////////////////////////////////////////////////////
IPC_V30_API INT IPCAPI  ipcGetDevicePort_Video_Internal(ipcHandle handle,OUT DWORD* pPort) ;


//说  明:获取SNMP端口
//参  数: [in]     handle		设备操作句柄   
//		  [out]    lpPort       设备通信端口
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDevicePort_Snmp_Internal(ipcHandle handle,OUT DWORD* lpPort) ;


//说  明:获取设备端口
//参  数: [in]     handle		设备操作句柄   
//		  [out]    lpPort       设备通信端口
//返回：非0失败。
IPC_V30_API INT IPCAPI  ipcGetDevicePort(ipcHandle handle,OUT DWORD* lpPort) ;


IPC_V30_API INT IPCAPI ipcWaitConnected_Inner( ipcHandle handle ,DWORD dwWaitTime,BOOL bCheck=FALSE);

#endif //__IPC_SDKBACKUP_H_

